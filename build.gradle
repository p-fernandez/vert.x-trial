plugins {
  id 'java'
  id 'application'
  id 'com.github.johnrengelman.shadow' version '2.0.4'
}
ext {
  vertxVersion = '3.6.3'
  junitJupiterEngineVersion = '5.2.0'
}

repositories {
  mavenLocal()
  jcenter()
}

group = 'se.kry'
version = '1.0.0-SNAPSHOT'

sourceCompatibility = '1.8'
mainClassName = 'io.vertx.core.Launcher'

def createDatabase = 'se.kry.infrastructure.database.persistence.migration.DBMigration'
def seedDatabase = 'se.kry.infrastructure.database.persistence.migration.DBSeed'
def mainVerticleName = 'se.kry.codetest.MainVerticle'
def watchForChange = 'src/**/*'
def doOnChange = './gradlew classes'

dependencies {

  implementation "io.vertx:vertx-core:$vertxVersion"
  implementation "io.vertx:vertx-core:$vertxVersion"
  implementation "io.vertx:vertx-web:$vertxVersion"
  implementation "io.vertx:vertx-web-client:$vertxVersion"
  compile group: 'org.xerial', name: 'sqlite-jdbc', version: '3.7.2'
  compile "io.vertx:vertx-jdbc-client:$vertxVersion"

  testImplementation "io.vertx:vertx-junit5:$vertxVersion"
  testRuntime("org.junit.jupiter:junit-jupiter-engine:$junitJupiterEngineVersion")
}


shadowJar {
  classifier = 'fat'
  manifest {
    attributes 'Main-Verticle': mainVerticleName
  }
  mergeServiceFiles {
    include 'META-INF/services/io.vertx.core.spi.VerticleFactory'
  }
}

task migrate(type:JavaExec) {
  classpath = sourceSets.main.runtimeClasspath

  main = project.hasProperty("mainClass") ? project.getProperty("mainClass") : createDatabase
}

task seed(type:JavaExec) {
  classpath = sourceSets.main.runtimeClasspath

  main = project.hasProperty("mainClass") ? project.getProperty("mainClass") : seedDatabase
}

test {
  useJUnitPlatform()
  testLogging {
    events 'PASSED', 'FAILED', 'SKIPPED'
  }
}

test.dependsOn migrate
test.dependsOn seed

run {
  args = ['run', mainVerticleName, "--redeploy=$watchForChange", "--launcher-class=$mainClassName", "--on-redeploy=$doOnChange"]
}

run.dependsOn migrate


wrapper {
  gradleVersion = '4.6'
}
